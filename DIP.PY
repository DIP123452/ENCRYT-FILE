#Encrypt by DIP123452
#Github : https://github.com/DIP123452
import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMgojIGVuY29kaW5nOiB1dGYtOAoiIiIKZW5jLnB5CgpDcmVhdGVkIGJ5IERJUDEyMzQ1MiBvbiAxNC8wNS8yMDIzLgpDb3B5cmlnaHQgKGMpIDIwMjMgQ29weXJpZ2h0IEhvbGRlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIiIiCgppbXBvcnQgYmFzZTY0CmltcG9ydCB6bGliCmltcG9ydCBtYXJzaGFsCmZyb20gc3lzIGltcG9ydCBleGl0CmZyb20gb3MgaW1wb3J0IHN5c3RlbQpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCgpkZWYgcXVpdCgpOgogICAgcHJpbnQoIlwwMzNbMzY7MW1bXDAzM1szMzsxbSFcMDMzWzM2OzFtXSBcMDMzWzMxOzFtRXhpdFx4MWJbMG0iKQogICAgZXhpdCgpCgpzeXN0ZW0oJ2NsZWFyJykKcHJpbnQgIiIiICAKICBcMDMzWzE7OTJt4paI4paI4paI4paI4paI4paI4paIIOKWiOKWiOKWiOKWiOKWiOKWiOKWiCDilojilojiloggICAg4paI4paIICDilojilojilojilojiloggIOKWiOKWiCAgICDilojilogg4paI4paI4paI4paI4paI4paI4paIIOKWiOKWiAogIFwwMzNbMTs5Mm3ilojiloggICAgICDilojiloggICAgICDilojilojilojiloggICDilojilogg4paI4paIICAg4paI4paIICDilojiloggIOKWiOKWiCAg4paI4paIICAgICAg4paI4paIICAgICAgCiAgXDAzM1sxOzkybeKWiOKWiOKWiOKWiOKWiOKWiOKWiCDilojilojilojilojiloggICDilojilogg4paI4paIICDilojilogg4paI4paI4paI4paI4paI4paI4paIICAg4paI4paI4paI4paIICAg4paI4paI4paI4paI4paIICAg4paI4paIICAgICAgCiAgXDAzM1sxOzkybSAgICAg4paI4paIIOKWiOKWiCAgICAgIOKWiOKWiCAg4paI4paIIOKWiOKWiCDilojiloggICDilojiloggICAg4paI4paIICAgIOKWiOKWiCAgICAgIOKWiOKWiCAgICAgIAogIFwwMzNbMTs5Mm3ilojilojilojilojilojilojilogg4paI4paI4paI4paI4paI4paI4paIIOKWiOKWiCAgIOKWiOKWiOKWiOKWiCDilojiloggICDilojiloggICAg4paI4paIICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiCDilojilojilojilojilojilojiloggCiAgICAgICAgIAogXDAzM1sxOzkzbcOXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5dcMDMzWzE7OTNtw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl1wwMzNbMTs5M23Dl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5cKIFwwMzNbMTs5M218ICAgICBcMDMzWzE7OTZtW+Kck10gQ1JFQVRFRCBCWVwzM1swO20gICA6ICBcMDMzWzE7OTZtU0VOQVlFTCBJU0xBTSAoRElQKSAgIFwwMzNbMTs5M218CiBcMDMzWzE7OTNtfCAgICAgXDAzM1sxOzMybVvinJNdIEZBQ0VCT0sgICAgICA6IFwwMzNbMTszNG0gU0VOQVlFIElTTEFNCQkgXDAzM1sxOzkzbXwKIFwwMzNbMTs5M218ICAgICBcMDMzWzE7MzVtW+Kck10gR0lUSFVCICAgICAgIDogIFwwMzNbMTszNW1NQUdJQy1ESVAuLiAgICAgICAgICAgXDAzM1sxOzkzbXwKIFwwMzNbMTs5M218ICAgICBcMDMzWzE7MzZtW+Kck10gVE9PTCBTVEFUVVMgIDogXDAzM1sxOzM2bSBSYW5kb20gQ2xvbmluZyBCRCAgICAgXDAzM1sxOzkzbXwKIFwwMzNbMTs5M218ICAgICBcMDMzWzE7MzVtW+Kck10gVEVBTSAgICAgICAgIDogIFwwMzNbMTszNW1LR0YgICAgICAgICAgICAgICAgICAgXDAzM1sxOzkzbXwKIFwwMzNbMTs5M218ICAgICBcMDMzWzE7MzZtW+Kck10gVE9PTCBWSVJTSU9OIDogIFwwMzNbMTszNm1NQVggICAgICAgICAgICAgICAgICAgXDAzM1sxOzkzbXwKIFwwMzNbMTs5M23Dl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXXDAzM1sxOzkzbcOXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl1wwMzNbMTs5M23Dl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXCiBcMDMzWzE7OTFtW1wwMzNbMTs5N23igKJcMDMzWzE7OTFtXVwwMzNbMTszMm0gUExaIFNBUFBPUlQgTUUgQlJPLi4uLgogXDAzM1sxOzkxbVtcMDMzWzE7OTdt4oCiXDAzM1sxOzkxbV1cMDMzWzE7MzJtIERJUCBURVJNVVggSEVMUElORyBaT05FLi4uLgogXDAzM1sxOzkzbcOXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXXDAzM1sxOzkzbcOXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl1wwMzNbMTs5M23Dl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5fDl8OXw5cKICAgICBceDFiWzE7OTdtCiBcMDMzWzMxOzFtW1wwMzNbMzc7MW0wMVwwMzNbMzE7MW1dXDAzM1sxOzkzbSBFbmNyeXB0IEJhc2UxNgogXDAzM1szMTsxbVtcMDMzWzM3OzFtMDJcMDMzWzMxOzFtXVwwMzNbMTs5M20gRW5jcnlwdCBCYXNlMzIKIFwwMzNbMzE7MW1bXDAzM1szNzsxbTAzXDAzM1szMTsxbV1cMDMzWzE7OTNtIEVuY3J5cHQgQmFzZTY0CiBcMDMzWzMxOzFtW1wwMzNbMzc7MW0wNFwwMzNbMzE7MW1dXDAzM1sxOzkzbSBFbmNyeXB0IE1hcnNoYWwKIFwwMzNbMzE7MW1bXDAzM1szNzsxbTA1XDAzM1szMTsxbV1cMDMzWzE7OTNtIEVuY3J5cHQgWmxpYixCYXNlMTYKIFwwMzNbMzE7MW1bXDAzM1szNzsxbTA2XDAzM1szMTsxbV1cMDMzWzE7OTNtIEVuY3J5cHQgWmxpYixCYXNlMzIKIFwwMzNbMzE7MW1bXDAzM1szNzsxbTA3XDAzM1szMTsxbV1cMDMzWzE7OTNtIEVuY3J5cHQgWmxpYixCYXNlNjQKIFwwMzNbMzE7MW1bXDAzM1szNzsxbTA4XDAzM1szMTsxbV1cMDMzWzE7OTNtIEVuY3J5cHQgTWFyc2hhbCxabGliLEJhc2UxNgogXDAzM1szMTsxbVtcMDMzWzM3OzFtMDlcMDMzWzMxOzFtXVwwMzNbMTs5M20gRW5jcnlwdCBNYXJzaGFsLFpsaWIsQmFzZTMyCiBcMDMzWzMxOzFtW1wwMzNbMzc7MW0xMFwwMzNbMzE7MW1dXDAzM1sxOzkzbSBFbmNyeXB0IE1hcnNoYWwsWmxpYixCYXNlNjQKIFwwMzNbMzE7MW1bXDAzM1szNzsxbTAwXDAzM1szMTsxbV1cMDMzWzE7OTNtIEV4aXQKICIiIgoKZGVmIG1haW4oKTogICAKICAgIGNob2ljZSA9IHJhd19pbnB1dCgnXHgxYlsxOzM3bVx4MWJbMzFtXG5bXHgxYlszM20rXHgxYlsxOzM3bVx4MWJbMzFtXVx4MWJbMzRtIENob29zZSBceDFiWzMxbTogXHgxYlswbScpCiAgICBpZiBjaG9pY2UgPT0gJzEnIG9yIGNob2ljZSA9PSAnMDEnOgogICAgICAgIHRyeToKICAgICAgICAgICAgZmlsZSA9IHJhd19pbnB1dCgnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtKlx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlswbUZpbGVceDFiWzMxbTogXHgxYlswbScpCiAgICAgICAgICAgIGZpbGVvcGVuID0gb3BlbihmaWxlKS5yZWFkKCkKICAgICAgICAgICAgYSA9IGJhc2U2NC5iMTZlbmNvZGUoZmlsZW9wZW4pCiAgICAgICAgICAgIGIgPSAiI0VuY3J5cHQgYnkgRElQMTIzNDUyXG4jR2l0aHViIDogaHR0cHM6Ly9naXRodWIuY29tL0RJUDEyMzQ1MlxuaW1wb3J0IGJhc2U2NFxuZXhlYyhiYXNlNjQuYjE2ZGVjb2RlKCciICsgYSArICInKSkiCiAgICAgICAgICAgIGMgPSBmaWxlLnJlcGxhY2UoJy5weScsICdfY3J5cHQucHknKQogICAgICAgICAgICBkID0gb3BlbihjLCAndycpCiAgICAgICAgICAgIGQud3JpdGUoYikKICAgICAgICAgICAgZC5jbG9zZSgpCiAgICAgICAgICAgIHByaW50ICdceDFiWzE7MzdtXHgxYlszMW1bXHgxYlszM20qXHgxYlsxOzM3bVx4MWJbMzFtXSBceDFiWzBtT1VUUFVUXHgxYlszMW06XHgxYlswbScsIGMKICAgICAgICAgICAgbWFpbigpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcmludCAnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtIVx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlszMW1GaWxlIG5vdCBmb3VuZCEnCiAgICAgICAgICAgIHF1aXQoKQoKICAgIGVsaWYgY2hvaWNlID09ICcyJyBvciBjaG9pY2UgPT0gJzAyJzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGZpbGUgPSByYXdfaW5wdXQoJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSpceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMG1GaWxlXHgxYlszMW06IFx4MWJbMG0nKQogICAgICAgICAgICBmaWxlb3BlbiA9IG9wZW4oZmlsZSkucmVhZCgpCiAgICAgICAgICAgIGEgPSBiYXNlNjQuYjMyZW5jb2RlKGZpbGVvcGVuKQogICAgICAgICAgICBiID0gIiNFbmNyeXB0IGJ5IERJUDEyMzQ1MlxuI0dpdGh1YiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ESVAxMjM0NTJcbmltcG9ydCBiYXNlNjRcbmV4ZWMoYmFzZTY0LmIzMmRlY29kZSgnIiArIGEgKyAiJykpIgogICAgICAgICAgICBjID0gZmlsZS5yZXBsYWNlKCcucHknLCAnX2NyeXB0LnB5JykKICAgICAgICAgICAgZCA9IG9wZW4oYywgJ3cnKQogICAgICAgICAgICBkLndyaXRlKGIpCiAgICAgICAgICAgIGQuY2xvc2UoKQogICAgICAgICAgICBwcmludCAnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtKlx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlswbU9VVFBVVFx4MWJbMzFtOlx4MWJbMG0nLCBjCiAgICAgICAgICAgIG1haW4oKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSFceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMzFtRmlsZSBub3QgZm91bmQhJwogICAgICAgICAgICBxdWl0KCkKCiAgICBlbGlmIGNob2ljZSA9PSAnMycgb3IgY2hvaWNlID09ICcwMyc6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBmaWxlID0gcmF3X2lucHV0KCdceDFiWzE7MzdtXHgxYlszMW1bXHgxYlszM20qXHgxYlsxOzM3bVx4MWJbMzFtXSBceDFiWzBtRmlsZVx4MWJbMzFtOiBceDFiWzBtJykKICAgICAgICAgICAgZmlsZW9wZW4gPSBvcGVuKGZpbGUpLnJlYWQoKQogICAgICAgICAgICBhID0gYmFzZTY0LmI2NGVuY29kZShmaWxlb3BlbikKICAgICAgICAgICAgYiA9ICIjRW5jcnlwdCBieSBESVAxMjM0NTJcbiNHaXRodWIgOiBodHRwczovL2dpdGh1Yi5jb20vRElQMTIzNDUyXG5pbXBvcnQgYmFzZTY0XG5leGVjKGJhc2U2NC5iNjRkZWNvZGUoJyIgKyBhICsgIicpKSIKICAgICAgICAgICAgYyA9IGZpbGUucmVwbGFjZSgnLnB5JywgJ19jcnlwdC5weScpCiAgICAgICAgICAgIGQgPSBvcGVuKGMsICd3JykKICAgICAgICAgICAgZC53cml0ZShiKQogICAgICAgICAgICBkLmNsb3NlKCkKICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSpceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMG1PVVRQVVRceDFiWzMxbTpceDFiWzBtJywgYwogICAgICAgICAgICBtYWluKCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHByaW50ICdceDFiWzE7MzdtXHgxYlszMW1bXHgxYlszM20hXHgxYlsxOzM3bVx4MWJbMzFtXSBceDFiWzMxbUZpbGUgbm90IGZvdW5kIScKICAgICAgICAgICAgcXVpdCgpCgogICAgZWxpZiBjaG9pY2UgPT0gJzQnIG9yIGNob2ljZSA9PSAnMDQnOgogICAgICAgIHRyeToKICAgICAgICAgICAgZmlsZSA9IHJhd19pbnB1dCgnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtKlx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlswbUZpbGVceDFiWzMxbTogXHgxYlswbScpCiAgICAgICAgICAgIGZpbGVvcGVuID0gb3BlbihmaWxlKS5yZWFkKCkKICAgICAgICAgICAgYSA9IGNvbXBpbGUoZmlsZW9wZW4sICdkZycsICdleGVjJykKICAgICAgICAgICAgbSA9IG1hcnNoYWwuZHVtcHMoYSkKICAgICAgICAgICAgcyA9IHJlcHIobSkKICAgICAgICAgICAgYiA9ICcjRW5jcnlwdCBieSBESVAxMjM0NTJcbiNHaXRodWIgOiBodHRwczovL2dpdGh1Yi5jb20vRElQMTIzNDUyXG5pbXBvcnQgbWFyc2hhbFxuZXhlYyhtYXJzaGFsLmxvYWRzKCcgKyBzICsgJykpJwogICAgICAgICAgICBjID0gZmlsZS5yZXBsYWNlKCcucHknLCAnX2NyeXB0LnB5JykKICAgICAgICAgICAgZCA9IG9wZW4oYywgJ3cnKQogICAgICAgICAgICBkLndyaXRlKGIpCiAgICAgICAgICAgIGQuY2xvc2UoKQogICAgICAgICAgICBwcmludCAnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtKlx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlswbU9VVFBVVFx4MWJbMzFtOlx4MWJbMG0nLCBjCiAgICAgICAgICAgIG1haW4oKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSFceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMzFtRmlsZSBub3QgZm91bmQhJwogICAgICAgICAgICBxdWl0KCkKCiAgICBlbGlmIGNob2ljZSA9PSAnNScgb3IgY2hvaWNlID09ICcwNSc6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBmaWxlID0gcmF3X2lucHV0KCdceDFiWzE7MzdtXHgxYlszMW1bXHgxYlszM20qXHgxYlsxOzM3bVx4MWJbMzFtXSBceDFiWzBtRmlsZVx4MWJbMzFtOiBceDFiWzBtJykKICAgICAgICAgICAgZmlsZW9wZW4gPSBvcGVuKGZpbGUpLnJlYWQoKQogICAgICAgICAgICBjID0gemxpYi5jb21wcmVzcyhmaWxlb3BlbikKICAgICAgICAgICAgZCA9IGJhc2U2NC5iMTZlbmNvZGUoYykKICAgICAgICAgICAgZSA9ICcjRW5jcnlwdCBieSBESVAxMjM0NTJcbiNHaXRodWIgOiBodHRwczovL2dpdGh1Yi5jb20vRElQMTIzNDUyXG5pbXBvcnQgbWFyc2hhbCx6bGliLGJhc2U2NFxuZXhlYyh6bGliLmRlY29tcHJlc3MoYmFzZTY0LmIxNmRlY29kZSgiJyArIGQgKyAnIikpKScKICAgICAgICAgICAgZiA9IGZpbGUucmVwbGFjZSgnLnB5JywgJ19jcnlwdC5weScpCiAgICAgICAgICAgIGcgPSBvcGVuKGYsICd3JykKICAgICAgICAgICAgZy53cml0ZShlKQogICAgICAgICAgICBnLmNsb3NlKCkKICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSpceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMG1PVVRQVVRceDFiWzMxbTpceDFiWzBtJywgZgogICAgICAgICAgICBtYWluKCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHByaW50ICdceDFiWzE7MzdtXHgxYlszMW1bXHgxYlszM20hXHgxYlsxOzM3bVx4MWJbMzFtXSBceDFiWzMxbUZpbGUgbm90IGZvdW5kIScKICAgICAgICAgICAgcXVpdCgpCgogICAgZWxpZiBjaG9pY2UgPT0gJzYnIG9yIGNob2ljZSA9PSAnMDYnOgogICAgICAgIHRyeToKICAgICAgICAgICAgZmlsZSA9IHJhd19pbnB1dCgnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtKlx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlswbUZpbGVceDFiWzMxbTogXHgxYlswbScpCiAgICAgICAgICAgIGZpbGVvcGVuID0gb3BlbihmaWxlKS5yZWFkKCkKICAgICAgICAgICAgYyA9IHpsaWIuY29tcHJlc3MoZmlsZW9wZW4pCiAgICAgICAgICAgIGQgPSBiYXNlNjQuYjMyZW5jb2RlKGMpCiAgICAgICAgICAgIGUgPSAnI0VuY3J5cHQgYnkgRElQMTIzNDUyXG4jR2l0aHViIDogaHR0cHM6Ly9naXRodWIuY29tL0RJUDEyMzQ1MlxuaW1wb3J0IG1hcnNoYWwsemxpYixiYXNlNjRcbmV4ZWMoemxpYi5kZWNvbXByZXNzKGJhc2U2NC5iMzJkZWNvZGUoIicgKyBkICsgJyIpKSknCiAgICAgICAgICAgIGYgPSBmaWxlLnJlcGxhY2UoJy5weScsICdfY3J5cHQucHknKQogICAgICAgICAgICBnID0gb3BlbihmLCAndycpCiAgICAgICAgICAgIGcud3JpdGUoZSkKICAgICAgICAgICAgZy5jbG9zZSgpCiAgICAgICAgICAgIHByaW50ICdceDFiWzE7MzdtXHgxYlszMW1bXHgxYlszM20qXHgxYlsxOzM3bVx4MWJbMzFtXSBceDFiWzBtT1VUUFVUXHgxYlszMW06XHgxYlswbScsIGYKICAgICAgICAgICAgbWFpbigpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcmludCAnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtIVx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlszMW1GaWxlIG5vdCBmb3VuZCEnCiAgICAgICAgICAgIHF1aXQoKQoKICAgIGVsaWYgY2hvaWNlID09ICc3JyBvciBjaG9pY2UgPT0gJzA3JzoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGZpbGUgPSByYXdfaW5wdXQoJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSpceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMG1GaWxlXHgxYlszMW06IFx4MWJbMG0nKQogICAgICAgICAgICBmaWxlb3BlbiA9IG9wZW4oZmlsZSkucmVhZCgpCiAgICAgICAgICAgIGMgPSB6bGliLmNvbXByZXNzKGZpbGVvcGVuKQogICAgICAgICAgICBkID0gYmFzZTY0LmI2NGVuY29kZShjKQogICAgICAgICAgICBlID0gJyNFbmNyeXB0IGJ5IERJUDEyMzQ1MlxuI0dpdGh1YiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ESVAxMjM0NTJcbmltcG9ydCBtYXJzaGFsLHpsaWIsYmFzZTY0XG5leGVjKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjY0ZGVjb2RlKCInICsgZCArICciKSkpJwogICAgICAgICAgICBmID0gZmlsZS5yZXBsYWNlKCcucHknLCAnX2NyeXB0LnB5JykKICAgICAgICAgICAgZyA9IG9wZW4oZiwgJ3cnKQogICAgICAgICAgICBnLndyaXRlKGUpCiAgICAgICAgICAgIGcuY2xvc2UoKQogICAgICAgICAgICBwcmludCAnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtKlx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlswbU9VVFBVVFx4MWJbMzFtOlx4MWJbMG0nLCBmCiAgICAgICAgICAgIG1haW4oKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSFceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMzFtRmlsZSBub3QgZm91bmQhJwogICAgICAgICAgICBxdWl0KCkKCiAgICBlbGlmIGNob2ljZSA9PSAnOCcgb3IgY2hvaWNlID09ICcwOCc6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBmaWxlID0gcmF3X2lucHV0KCdceDFiWzE7MzdtXHgxYlszMW1bXHgxYlszM20qXHgxYlsxOzM3bVx4MWJbMzFtXSBceDFiWzBtRmlsZVx4MWJbMzFtOiBceDFiWzBtJykKICAgICAgICAgICAgZmlsZW9wZW4gPSBvcGVuKGZpbGUpLnJlYWQoKQogICAgICAgICAgICBzYSA9IGNvbXBpbGUoZmlsZW9wZW4sICdkZycsICdleGVjJykKICAgICAgICAgICAgc2IgPSBtYXJzaGFsLmR1bXBzKHNhKQogICAgICAgICAgICBjID0gemxpYi5jb21wcmVzcyhzYikKICAgICAgICAgICAgZCA9IGJhc2U2NC5iMTZlbmNvZGUoYykKICAgICAgICAgICAgZSA9ICcjRW5jcnlwdCBieSBESVAxMjM0NTJcbiNHaXRodWIgOiBodHRwczovL2dpdGh1Yi5jb20vRElQMTIzNDUyXG5pbXBvcnQgbWFyc2hhbCx6bGliLGJhc2U2NFxuZXhlYyhtYXJzaGFsLmxvYWRzKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjE2ZGVjb2RlKCInICsgc3RyKGQpICsgJyIpKSkpJwogICAgICAgICAgICBmID0gZmlsZS5yZXBsYWNlKCcucHknLCAnX2NyeXB0LnB5JykKICAgICAgICAgICAgZyA9IG9wZW4oZiwgJ3cnKQogICAgICAgICAgICBnLndyaXRlKGUpCiAgICAgICAgICAgIGcuY2xvc2UoKQogICAgICAgICAgICBwcmludCAnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtKlx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlswbU9VVFBVVFx4MWJbMzFtOlx4MWJbMG0nLCBmCiAgICAgICAgICAgIG1haW4oKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSFceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMzFtRmlsZSBub3QgZm91bmQhJwogICAgICAgICAgICBxdWl0KCkKCiAgICBlbGlmIGNob2ljZSA9PSAnOScgb3IgY2hvaWNlID09ICcwOSc6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBmaWxlID0gcmF3X2lucHV0KCdceDFiWzE7MzdtXHgxYlszMW1bXHgxYlszM20qXHgxYlsxOzM3bVx4MWJbMzFtXSBceDFiWzBtRmlsZVx4MWJbMzFtOiBceDFiWzBtJykKICAgICAgICAgICAgZmlsZW9wZW4gPSBvcGVuKGZpbGUpLnJlYWQoKQogICAgICAgICAgICBzYSA9IGNvbXBpbGUoZmlsZW9wZW4sICdkZycsICdleGVjJykKICAgICAgICAgICAgc2IgPSBtYXJzaGFsLmR1bXBzKHNhKQogICAgICAgICAgICBjID0gemxpYi5jb21wcmVzcyhzYikKICAgICAgICAgICAgZCA9IGJhc2U2NC5iMzJlbmNvZGUoYykKICAgICAgICAgICAgZSA9ICcjRW5jcnlwdCBieSBESVAxMjM0NTJcbiNHaXRodWIgOiBodHRwczovL2dpdGh1Yi5jb20vRElQMTIzNDUyXG5pbXBvcnQgbWFyc2hhbCx6bGliLGJhc2U2NFxuZXhlYyhtYXJzaGFsLmxvYWRzKHpsaWIuZGVjb21wcmVzcyhiYXNlNjQuYjMyZGVjb2RlKCInICsgc3RyKGQpICsgJyIpKSkpJwogICAgICAgICAgICBmID0gZmlsZS5yZXBsYWNlKCcucHknLCAnX2NyeXB0LnB5JykKICAgICAgICAgICAgZyA9IG9wZW4oZiwgJ3cnKQogICAgICAgICAgICBnLndyaXRlKGUpCiAgICAgICAgICAgIGcuY2xvc2UoKQogICAgICAgICAgICBwcmludCAnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtKlx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlswbU9VVFBVVFx4MWJbMzFtOlx4MWJbMG0nLCBmCiAgICAgICAgICAgIG1haW4oKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSFceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMzFtRmlsZSBub3QgZm91bmQhJwogICAgICAgICAgICBxdWl0KCkKCiAgICBlbGlmIGNob2ljZSA9PSAnMTAnIG9yIGNob2ljZSA9PSAnMTAnOgogICAgICAgIHRyeToKICAgICAgICAgICAgZmlsZSA9IHJhd19pbnB1dCgnXHgxYlsxOzM3bVx4MWJbMzFtW1x4MWJbMzNtKlx4MWJbMTszN21ceDFiWzMxbV0gXHgxYlswbUZpbGVceDFiWzMxbTogXHgxYlswbScpCiAgICAgICAgICAgIGZpbGVvcGVuID0gb3BlbihmaWxlKS5yZWFkKCkKICAgICAgICAgICAgc2EgPSBjb21waWxlKGZpbGVvcGVuLCAnZGcnLCAnZXhlYycpCiAgICAgICAgICAgIHNiID0gbWFyc2hhbC5kdW1wcyhzYSkKICAgICAgICAgICAgYyA9IHpsaWIuY29tcHJlc3Moc2IpCiAgICAgICAgICAgIGQgPSBiYXNlNjQuYjY0ZW5jb2RlKGMpCiAgICAgICAgICAgIGUgPSAnI0VuY3J5cHQgYnkgRElQMTIzNDUyXG4jR2l0aHViIDogaHR0cHM6Ly9naXRodWIuY29tL0RJUDEyMzQ1MlxuaW1wb3J0IG1hcnNoYWwsemxpYixiYXNlNjRcbmV4ZWMobWFyc2hhbC5sb2Fkcyh6bGliLmRlY29tcHJlc3MoYmFzZTY0LmI2NGRlY29kZSgiJyArIHN0cihkKSArICciKSkpKScKICAgICAgICAgICAgZiA9IGZpbGUucmVwbGFjZSgnLnB5JywgJ19jcnlwdC5weScpCiAgICAgICAgICAgIGcgPSBvcGVuKGYsICd3JykKICAgICAgICAgICAgZy53cml0ZShlKQogICAgICAgICAgICBnLmNsb3NlKCkKICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTszN21ceDFiWzMxbVtceDFiWzMzbSpceDFiWzE7MzdtXHgxYlszMW1dIFx4MWJbMG1PVVRQVVRceDFiWzMxbTpceDFiWzBtJywgZgogICAgICAgICAgICBtYWluKCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHByaW50ICdceDFiWzE7MzdtXHgxYlszMW1bXHgxYlszM20hXHgxYlsxOzM3bVx4MWJbMzFtXSBceDFiWzMxbUZpbGUgbm90IGZvdW5kIScKICAgICAgICAgICAgcXVpdCgpCgogICAgZWxpZiBjaG9pY2UgPT0gJzAnIG9yIGNob2ljZSA9PSAnMDAnOgogICAgICAgIHN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50KCdceDFiWzM0bVtceDFiWzMzbSpceDFiWzM0bV0gXHgxYlsxOzM3bVx4MWJbMzFtRXhpdCcpCiAgICAgICAgc2xlZXAoMikKICAgICAgICBleGl0KCdceDFiWzMzbVNlZSB5b3UgYWdhaW4gOylceDFiWzMzbScpCiAgICAgICAgCiAgICBlbHNlOgogICAgICAgIHByaW50ICdceDFiWzMxbVxuW1x4MWJbMzNtLVx4MWJbMzFtXSBceDFiWzMzbVdyb25nIGlucHV0Li4hIScKICAgICAgICBzbGVlcCgxKQogICAgICAgIG1haW4oKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICB0cnk6CiAgICAgICAgbWFpbigpCiAgICBleGNlcHQoS2V5Ym9hcmRJbnRlcnJ1cHQsIEVPRkVycm9yKToKICAgICAgICBwcmludCgiXDAzM1szNjsxbVxuW1wwMzNbMzE7MW0hXDAzM1szNjsxbV1cMDMzWzMzOzFtRGV0ZWN0cyBhIGZvcmNlZCBzdG9wIHByb2dyYW0gXHgxYlswbSIpCiAgICAgICAgZXhpdCgwKQo='))
